import{_ as t,r as a,o as l,c as o,a as n,b as i,F as d,e as r,d as e}from"./app.e8ec4d2d.js";var c="/assets/bitbox-app-verifizieren.595088e7.png",u="/assets/sha256-bitbox.4807b35d.png",h="/assets/specter-desktop-verifizieren.dee85b83.png",p="/assets/sha256-specter.9649a6ba.png",m="/assets/grep-sha256-specter.aa922f00.png";const g={},b=r('<h1 id="software-verifizieren" tabindex="-1"><a class="header-anchor" href="#software-verifizieren" aria-hidden="true">#</a> Software verifizieren</h1><h2 id="was-und-warum" tabindex="-1"><a class="header-anchor" href="#was-und-warum" aria-hidden="true">#</a> Was und warum?</h2><p>Die meisten seri\xF6sen Webseiten, auf denen du Bitcoin-bezogene Software herunterladen kannst, weisen dich drauf hin, den Download zu verifizieren. Dies ist wichtig um sicherzustellen, dass du auch wirklich die vom Hersteller angebotene Software installierst.</p><p>Es gibt einige potentielle M\xF6glichkeiten, mit denen Angreifer dir eine schadhafte Software-Version unterschieben k\xF6nnen. Herk\xF6mmlicherweise werden die meisten dieser Angriffsszenarien durch die App Stores von Apple, Google, Microsoft, etc. \xFCberpr\xFCft. Bitcoin-bezogene Software wird oftmals jedoch au\xDFerhalb dieser zentralen Plattformen angeboten, was bspw. Vorteile in der Zensurresistenz hat. Indem du pr\xFCfst, dass die Software von der richtigen Website heruntergeladen wurde und sie anschlie\xDFend verifizierst, sch\xFCtzt du dich weitestgehend vor Angreifern.</p><p>Auch wenn es auf den ersten Blick recht technisch erscheint, solltest du dich mit den folgenden Schritten vertraut machen. Das Verifizieren der Software geh\xF6rt zu jeder Installation und jedem Update dazu \u2013\xA0Kontrolle geht \xFCber Vertrauen, schlie\xDFlich geht es um dein Geld.</p><h2 id="wie-verifiziere-ich-software" tabindex="-1"><a class="header-anchor" href="#wie-verifiziere-ich-software" aria-hidden="true">#</a> Wie verifiziere ich Software?</h2><p>Vorraussetzung ist die Software <strong>GPG</strong>, die du f\xFCr dein Betriebssystem installieren musst:</p>',7),f=e("Windows: "),k={href:"https://gpg4win.org/download.html",target:"_blank",rel:"noopener noreferrer"},_=e("Gpg4win"),w=e("macOS: "),v={href:"https://gpgtools.org/",target:"_blank",rel:"noopener noreferrer"},S=e("GPGTools"),D=e("Linux: "),z={href:"https://gnupg.org/download/index.html",target:"_blank",rel:"noopener noreferrer"},B=e("GnuPG"),x=r('<p>Bevor wir loslegen noch ein paar Begriffe, die du w\xE4hrend des Vorgangs gebrauchen wirst:</p><ul><li><strong>Private Key</strong>: Der private Schl\xFCssel, mit dem der Software-Hersteller die Datei signiert. Nur der Hersteller hat diesen Schl\xFCssel und er kann damit \xF6ffentlich einsehbare Signaturen erstellen.</li><li><strong>Signature</strong>: \xD6ffentlich zug\xE4ngliche Information, mit der sichergestellt werden kann, dass sie vom Besitzer eines bestimmten privaten Schl\xFCssels erstellt wurde.</li><li><strong>Public Key</strong>: Dieser Schl\xFCssel ist das \xF6ffentliche Gegenst\xFCck zum privaten Schl\xFCssel, mit denen die Allgemeinheit die Signatur des Herstellers \xFCberpr\xFCfen kann.</li><li><strong>Checksum</strong>: Pr\xFCfsumme, die den Dateiinhalt kryptografisch beschreibt. \xC4ndert sich der Dateiinhalt auch nur im geringsten, dann erh\xE4lt man auch eine andere Pr\xFCfsumme.</li><li><strong>SHA256</strong>: Die kryptografische Funktion, mit der die Pr\xFCfsumme erstellt wird. Sie wird mit dem Dateinamen der zu \xFCberpr\xFCfenden Datei aufgerufen. Die Funktion liefert unabh\xE4ngig vom Betriebssystem bei gleichem Dateiinhalt immer das gleiche Ergebnis.</li></ul><p>Der Ablauf ist dabei immer gleich:</p><ol start="0"><li>\xD6ffentlichen Schl\xFCssel des Herstellers herunterladen und importieren: Dies ist nur beim ersten Mal n\xF6tig (oder bei \xC4nderungen des Schl\xFCssels). Im Idealfall bezieht man den \xF6ffentlichen Schl\xFCssel vom Hersteller direkt und unabh\xE4ngig von der Software-Downloadseite.</li><li>Software-Datei herunterladen</li><li>Pr\xFCfsumme erstellen und vergleichen</li><li>Signatur-Datei herunterladen</li><li>Signatur der Software-Datei verifizieren</li></ol><p>Je nach Betriebssystem und GPG-Software kannst du einzelne Teilschritte der Verifizierung auch in der grafischen Benutzeroberfl\xE4che machen. Den vollst\xE4ndigen Weg gehen wir im folgenden aber auf der Kommandozeile durch \u2013\xA0keine Angst, es ist einfacher als es zun\xE4chst klingt. \u{1F609}</p><h2 id="beispiel-shiftcrypto-bitbox-app" tabindex="-1"><a class="header-anchor" href="#beispiel-shiftcrypto-bitbox-app" aria-hidden="true">#</a> Beispiel: ShiftCrypto BitBox App</h2>',6),y=e("Sehen wir uns den Vorgang am Beispiel der "),A={href:"https://shiftcrypto.ch/download/",target:"_blank",rel:"noopener noreferrer"},P=e("BitBox App"),G=e(" (hier Version 4.27.0) an: Zus\xE4tzlich zu den Download-Buttons siehst du die "),E=n("em",null,"Checksums",-1),C=e(" f\xFCr die jeweiligen Dateien."),F=r('<p><img src="'+c+'" alt="BitBox App verifizieren"></p><h3 id="schritt-1-prufsumme-vergleichen" tabindex="-1"><a class="header-anchor" href="#schritt-1-prufsumme-vergleichen" aria-hidden="true">#</a> Schritt 1: Pr\xFCfsumme vergleichen</h3><p>Du l\xE4dst die Datei f\xFCr dein Betriebssystem hinunter und \xF6ffnest den Download-Orner in der Kommandozeile. Mit dem Befehl <code>sha256sum</code> und dem Dateinamen kannst du die Pr\xFCfsumme erstellen und sie dann mit der Angabe auf der Website vergleichen:</p><p><img src="'+u+'" alt="Pr\xFCfsumme erstellen und vergleichen"></p><p>Die Pr\xFCfsumme stimmt \u2013\xA0das ist schon mal ein guter erster Schritt.</p><div class="custom-container tip"><p class="custom-container-title">HINWEIS</p><p>Bis hierhin kann die Sache aber immer noch einen Haken haben: Hat ein Angreifer die Download-Seite kompromitiert, w\xE4re es ihm wahrscheinlich sehr leicht m\xF6glich, neben der Datei auch die Pr\xFCfsumme auszutauschen. Daher sollte nicht nur die Pr\xFCfsumme, sondern auch die Signatur der heruntergeladenen Datei gecheckt werden!</p></div><h3 id="schritt-2-signatur-uberprufen" tabindex="-1"><a class="header-anchor" href="#schritt-2-signatur-uberprufen" aria-hidden="true">#</a> Schritt 2: Signatur \xFCberpr\xFCfen</h3>',7),W=e("Die meisten Hersteller bieten dir auf ihrer Download-Seite eine Anleitung zum Verifizieren der Signatur an. So auch ShiftCrypto auf der GitHub-Seite zum jeweiligen Release, die du \xFCber den "),H={href:"https://github.com/digitalbitbox/bitbox-wallet-app/releases/tag/v4.27.0",target:"_blank",rel:"noopener noreferrer"},I=e("Verify Signature"),K=e("-Link erreichst."),V=e("Solltest du den \xF6ffentlichen Schl\xFCssel f\xFCr die ShiftCrypto Software-Releases noch nicht importiert haben, dann kannst du ihn von Keybase herunterladen: Keybase ist eine Website auf der Leute ihre \xF6ffentlichen Schl\xFCssel abgelegen k\xF6nnen \u2013\xA0in diesem Fall ist es der "),N={href:"https://keybase.io/benma/pgp_keys.asc?fingerprint=2260e48288882c76afaa319d67a2b160f74db275",target:"_blank",rel:"noopener noreferrer"},T=e("Public Key von Marko Bencun"),M=e(", der f\xFCr ShiftCrypto die Software-Releases signiert."),R=r(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Public Key herunterladen</span>
<span class="token function">curl</span> https://keybase.io/benma/pgp_keys.asc?fingerprint<span class="token operator">=</span>2260e48288882c76afaa319d67a2b160f74db275 <span class="token operator">&gt;</span> benma.asc

<span class="token comment"># Public Key importieren</span>
gpg --import benma.asc
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Dies muss nun ebenfalls f\xFCr die Signatur der Download-Datei geschehen: Zuerst laden wir die Signatur herunter, um sie anschlie\xDFend zu \xFCberpr\xFCfen.</p><p>Der Signatur-Dateiname entspricht dem der Software \u2013\xA0sie hat zus\xE4tzlich die Namensendung <code>.asc</code>. Beachte auch, dass die Signaturdatei im gleichen Ordner wie die Software gespeichert werden muss.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Signatur herunterladen</span>
<span class="token function">curl</span> https://github.com/digitalbitbox/bitbox-wallet-app/releases/download/v4.27.0/BitBox-4.27.0-macOS.zip.asc <span class="token operator">&gt;</span> BitBox-4.27.0-macOS.zip.asc

<span class="token comment"># Signatur \xFCberpr\xFCfen</span>
gpg --verify BitBox-4.27.0-macOS.zip.asc
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Im Erfolgsfall solltest du folgendes sehen:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>gpg: Signature made &lt;DATE AND TIME&gt;
gpg:                using RSA key 2D8876810AB092E451DCA894804538928C37EAE8
gpg: Good signature from &quot;Marko Bencun &lt;marko@shiftcrypto.ch&gt;&quot; [unknown]
gpg:                 aka &quot;Marko Bencun &lt;mbencun+pgp@gmail.com&gt;&quot; [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 2260 E482 8888 2C76 AFAA  319D 67A2 B160 F74D B275
     Subkey fingerprint: 2D88 7681 0AB0 92E4 51DC  A894 8045 3892 8C37 EAE8
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Wichtig ist dabei der Teil <code>Good signature from &quot;Marko Bencun &lt;marko@shiftcrypto.ch&gt;&quot;</code>. Die Warnung und der Zusatz <code>[unknown]</code> erscheinen, da der Schl\xFCssel in GPG unbest\xE4tigt ist. Dies w\xE4re ein zus\xE4tzlicher Schritt, bei dem du best\xE4tigst, dass du diesen Schl\xFCssel auch sicher vom Hersteller direkt bekommen hast. Die Software kann unabh\xE4ngig davon installiert werden, da du nun sichergestellt hast, dass sie vom Hersteller signiert wurde.</p><div class="custom-container warning"><p class="custom-container-title">ACHTUNG</p><p>Sollte die Meldung <code>Good signature</code> nicht erscheinen, dann handelt es sich um einen fehlerhaften Download und du solltest die Software nicht installieren. In dem Fall solltest du dich direkt an den Hersteller wenden und auf dieses Problem aufmerksam machen.</p></div><h2 id="beispiel-specter-desktop-app" tabindex="-1"><a class="header-anchor" href="#beispiel-specter-desktop-app" aria-hidden="true">#</a> Beispiel: Specter Desktop App</h2>`,9),q=e("Weil es so viel Spa\xDF macht, das Ganze nun auch noch mal f\xFCr die "),j={href:"https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0",target:"_blank",rel:"noopener noreferrer"},O=e("Specter Desktop App"),L=e(" (Version 1.3.0). Die Downloads werden hier direkt auf GitHub angeboten, das Vorgehen ist aber relativ gleich."),Z=n("p",null,[n("img",{src:h,alt:"Specter Desktop verifizieren"})],-1),U=e("Die Specter-Downloads werden mit "),J={href:"https://benkaufman.info/ben-kaufman.asc",target:"_blank",rel:"noopener noreferrer"},$=e("Ben Kaufman's Public Key"),Q=e(" signiert, den du direkt bei Ben auf der Website herunterladen kannst:"),X=r(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Public Key herunterladen</span>
<span class="token function">curl</span> https://benkaufman.info/ben-kaufman.asc <span class="token operator">&gt;</span> ben-kaufman.asc

<span class="token comment"># Public Key importieren</span>
gpg --import ben-kaufman.asc
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Auch hier ist es gut zu sehen, dass der \xF6ffentliche Schl\xFCssel nicht Teil des gleichen GitHub Repositories ist, sondern von einer separaten Website geladen werden muss: W\xE4re das Repository kompromitiert, w\xE4re es leicht ebenso auch den Key auszutauschen. Stattdessen m\xFCssten in diesem Fall sowohl das Repository als auch Ben&#39;s Website gehackt werden.</p><h3 id="prufsumme-und-signatur-uberprufen" tabindex="-1"><a class="header-anchor" href="#prufsumme-und-signatur-uberprufen" aria-hidden="true">#</a> Pr\xFCfsumme und Signatur \xFCberpr\xFCfen</h3><p>Du l\xE4dst die Software f\xFCr dein Betriebssystem herunter, damit du die Pr\xFCfsumme erstellen kannst:</p><p><img src="`+p+'" alt="Pr\xFCfsumme erstellen"></p>',5),Y=e("Da Specter pro Release verschiedenste Dateien ver\xF6ffentlicht, werden die Pr\xFCfsummen und Signaturdateien nicht einzeln angeboten. Stattdessen werden sie alle gesammelt in der Datei "),ee={href:"https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0/sha256.signed.txt",target:"_blank",rel:"noopener noreferrer"},ne=e("sha256.signed.txt"),se=e(" zusammengefasst. Diese Datei ist mit Ben Kaufman's Schl\xFCssel signiert, so dass mit der \xDCberpr\xFCfung der Signatur die Korrektheit der darin enthaltenen Pr\xFCfsummen sichergestellt werden kann."),ie=r(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Signierte Pr\xFCfsummendatei herunterladen</span>
<span class="token function">curl</span> https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0/sha256.signed.txt <span class="token operator">&gt;</span> sha256.signed.txt

<span class="token comment"># Signatur \xFCberpr\xFCfen</span>
gpg --verify sha256.signed.txt
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Im Erfolgsfall sollte die Meldung folgenderma\xDFen aussehen:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>gpg: Signature made &lt;DATE AND TIME&gt;
gpg:                using RSA key 277F910FF06DC7619A71C1F67DC93B9A38A23CB2
gpg: Good signature from &quot;Ben Kaufman &lt;ben.kaufman10@gmail.com&gt;&quot; [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 5DF6 A760 1DB8 B78E BDEC  18DB 5D27 DE56 4153 F2BD
     Subkey fingerprint: 277F 910F F06D C761 9A71  C1F6 7DC9 3B9A 38A2 3CB2
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Wenn du <code>Good signature</code> siehst, dann kannst du auch hier wieder von einer validen Signatur ausgehen.</p><p>Nun muss nur noch die Pr\xFCfsumme gecheckt werden: Dies geht indem du in der signierten Datei nach dem Ergebnis der <code>sha256sum</code> Funktion suchst \u2026</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token variable"><span class="token variable">$(</span>sha256sum SpecterDesktop-v1.3.0.dmg<span class="token variable">)</span></span> sha256.signed.txt
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Wenn du die Zeile mit der Pr\xFCfsumme siehst ist alles gut:</p><p><img src="`+m+'" alt="Pr\xFCfsumme checken"></p><p>Bekommst du keine Ausgabe oder einen Fehler zu sehen, dann ist die Pr\xFCfsumme nicht in der signierten Datei vorhanden. In dem Fall solltest du im Specter Desktop Repository ein Issue anlegen und auf das Problem hinweisen.</p>',9);function re(te,ae){const s=a("ExternalLinkIcon");return l(),o(d,null,[b,n("ul",null,[n("li",null,[f,n("a",k,[_,i(s)])]),n("li",null,[w,n("a",v,[S,i(s)])]),n("li",null,[D,n("a",z,[B,i(s)])])]),x,n("p",null,[y,n("a",A,[P,i(s)]),G,E,C]),F,n("p",null,[W,n("a",H,[I,i(s)]),K]),n("p",null,[V,n("a",N,[T,i(s)]),M]),R,n("p",null,[q,n("a",j,[O,i(s)]),L]),Z,n("p",null,[U,n("a",J,[$,i(s)]),Q]),X,n("p",null,[Y,n("a",ee,[ne,i(s)]),se]),ie],64)}var oe=t(g,[["render",re]]);export{oe as default};
